// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type shortLinkTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *shortLinkTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("short_links").
func (v *shortLinkTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *shortLinkTableType) Columns() []string {
	return []string{
		"id",
		"short_id",
		"original_url",
		"created_at",
		"expires_at",
		"max_visits",
		"visits",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *shortLinkTableType) NewStruct() reform.Struct {
	return new(ShortLink)
}

// NewRecord makes a new record for that table.
func (v *shortLinkTableType) NewRecord() reform.Record {
	return new(ShortLink)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *shortLinkTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ShortLinkTable represents short_links view or table in SQL database.
var ShortLinkTable = &shortLinkTableType{
	s: parse.StructInfo{
		Type:    "ShortLink",
		SQLName: "short_links",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "uuid.UUID", Column: "id"},
			{Name: "ShortID", Type: "string", Column: "short_id"},
			{Name: "OriginalURL", Type: "string", Column: "original_url"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "ExpiresAt", Type: "*time.Time", Column: "expires_at"},
			{Name: "MaxVisits", Type: "int64", Column: "max_visits"},
			{Name: "Visits", Type: "int64", Column: "visits"},
		},
		PKFieldIndex: 0,
	},
	z: new(ShortLink).Values(),
}

// String returns a string representation of this struct or record.
func (s ShortLink) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "ShortID: " + reform.Inspect(s.ShortID, true)
	res[2] = "OriginalURL: " + reform.Inspect(s.OriginalURL, true)
	res[3] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[4] = "ExpiresAt: " + reform.Inspect(s.ExpiresAt, true)
	res[5] = "MaxVisits: " + reform.Inspect(s.MaxVisits, true)
	res[6] = "Visits: " + reform.Inspect(s.Visits, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ShortLink) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.ShortID,
		s.OriginalURL,
		s.CreatedAt,
		s.ExpiresAt,
		s.MaxVisits,
		s.Visits,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ShortLink) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.ShortID,
		&s.OriginalURL,
		&s.CreatedAt,
		&s.ExpiresAt,
		&s.MaxVisits,
		&s.Visits,
	}
}

// View returns View object for that struct.
func (s *ShortLink) View() reform.View {
	return ShortLinkTable
}

// Table returns Table object for that record.
func (s *ShortLink) Table() reform.Table {
	return ShortLinkTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ShortLink) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ShortLink) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ShortLink) HasPK() bool {
	return s.ID != ShortLinkTable.z[ShortLinkTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ShortLink) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ShortLinkTable
	_ reform.Struct = (*ShortLink)(nil)
	_ reform.Table  = ShortLinkTable
	_ reform.Record = (*ShortLink)(nil)
	_ fmt.Stringer  = (*ShortLink)(nil)
)

func init() {
	parse.AssertUpToDate(&ShortLinkTable.s, new(ShortLink))
}
